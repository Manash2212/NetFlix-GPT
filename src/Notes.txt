...................The NetFlix GPT................

   ðŸ”°Part-1
#1 - Fist Create A React app 
#2 - Configured Tailwind Css

   ðŸ”°Part-2
#3 - Create Body is a Parent Component
#4 - Set routing part in body
#5 - Create Login form and set the Header, and also use Conditional Rendaring using UseState, 
    (By Default you will be Redirecting to Sign In Option and If you click Sign Up Ooption then then the Form will be Changed.)  

   ðŸ”°Part-3 (Time - 2.28.0 min time Left)
#6 - Handleing Form Validation and Using useRef Hooks
#7 - Using handleButtonClick function to check what will happen if users Press Sign in or Sign Ups button
#8 - Create utility file inside utils, name : Validate.js, in this file we will be program about form
     Validating - and if the validate fails then it will give us an Error message.
#9 - Authentication for Sign in / Sign Up
#10 - Using Google Firebase for Authentication
#11 - Steps to Deploy our Apps to the Firebase

      - First we have to create an Account into the Firebase
      - Create a Progect and Install the Required Command (specified)
      - Come back to the VsCode and try to Login the Firebase
      - At the Login time we coud have get some Error Like this- 
         ðŸ’«C:\Users\Manash\AppData\Roaming\npm\firebase.ps1      
            cannot be loaded because running scripts is disabled  
            on this system. For more information, see 
            about_Execution_Policies at 
            + ~~~~~~~~
                + CategoryInfo          : SecurityError: (:) [],
                + FullyQualifiedErrorId : UnauthorizedAccess
      - [[ To solve the Error run some Command in terminal
         1st -  //set-ExecutionPolset-ExecutionPolicy
         2nd - // Get-ExecutionPolicy
         3rd - // Get-ExecutionPolicy -list ]]

      - Then again run, **firebase login --no-localhost**
      - Then Step by step we wll be initialized the firebase with the VsCode
      - at the configuration time a qustion will be asked for create a new folder by firebase: 
         : What do you want to use as your public directory?: build

   ðŸ”°Part-5 (Time - 1.26.40 min time Left)

#12 - Authentication for Sign Up and Sign In form. 
#13 - First check teh firebase docs, in there describe it the logic For Sign Up and Sign In.
#14 - For Sign Up 
      - We have to import the Sign Up Logic, More import things is there is a line "const auth = getAuth()"
        which we have to import form firebase/auth.
      - After Complete the coding, check the user are registered or not in firebase.  
#15 - For Sign In
      - the Logic is same.(check Firebase Documentation)

   ðŸ”°Part-6 (Time - 1.3.10 min time Left) 

#16 - Deploying our Apps to Firebase
#17 - Steps to Deploy our App to Firebase 
      - 1 > Firebase Login
      - 2 > Firebase init
      - 3 > Firebase Deploy
#18 - Now Installing Redux Toolkit and react-redux for storing the user Data.
#19 - Creatrd userSlice and appStore and Provided the appStore in App.js Component
#20 - Now to send the data to redux store, we have to dispatch an Action on everytime when sign in or sign Up
      so, to get Raid of this.

      ðŸ”°Part-7

#21 - Now i have Implemented the Dropdown menu in Header Component
#22 - At there i have Implemented Sign Out Features. 


      ðŸ”°Part-8

#23 - Now update the user Details in Redux store after a successful Sign Up or Sign in which Implemented in Login Component.
#24 - And also use the useSelector Hooks in Header for featching the user Details.

      ðŸ”°Part-9 (2nd Video - Building the Core)

#25 - It's Time to Solve some bug in Our App.
#26 - What is the Bug-1? :- Suppose I'm in Sign in OR Sign Up page, without login i can still access the 
      /browse page, which i should not be able to access the browse page. 
#27 - And:- without Sign Out I can still access the Sign In and Sign Up page. Which should not be happen.

#28 - Solution for Bug-1...!
#29 - as we know onAuthStateChange is a kind of eventListener Which will check always the current user, when it is Sign up or Signed in or signed out , so if we try to nevigate from the onAuthStateChange which is inside useEffect function, we will not be able to do that, because if we nevigate from the onAuthStateChange then function should be inside the <RoterProvider>, so in Body Component ther is no possible to keep stroe this function in <RoterProvider>, so if we nevigate from the onAuthStateChange then we have to keep it a Component which is present in my whole app and it is also in <RoterProvider>,  

#30 - So, as we know the Header Component is present in my whole app as well as, it is inside <RoterProvider>, so we take it out the onAuthStateChange function from Body to Header Component and nevigateing the route form ther only. and we don't need to write seperate logic in Login page and as well as the Sign out function.



   
      ðŸ”°Part-10 (Unsubscribing onAuthStateChange)

#31 - why we Unsubscribing the onAuthStateChange? 
#32 - Ans :- because "onAuthStateChanged" is kind of a eventListener, it works when the Auth is Changed.
      When the "Header" Component will unload after that it will Unsubscribe the "onAuthStateChanged".
      That means it will track when the user Sign Up - Sign In OR Sign Out. after that the Component will Unmount.
      So, if i Unsubscribe the Component it will basically Unmount.


      ðŸ”°Part-12

#33 - Sign up in TMDB app and generate an API and get an Access Token.
#34 - Fetch the API of Movie List form TMDB and made the API call in Browser Component.
#35 - Why does the React.Strictmode render the Application twice.
      Ans :- React.Strictmode does extra rendering to check some inconsistency between our calls and this only happen in development mode, and it'll throw an error if there is some inconsistency in our Rendaring Cycle.

      ðŸ”°Part-13 (Adding Movie data to the Store "movieslice")

#36 - Created a new Redux file which is (movieSlice) and implement the functionality.
#37 - After that import the movieSlice into the appStore.
#38 - Then in Browser Component, dispatch the Action("addNowPlayingMovies") and pass the json value.

      ðŸ”°Part-14 (Creating our own Castom Hooks) > 2.40 hrs left
#39 - Create our custom hooks for nowPlayingMovis
#40 - In Browser Component looking so massy so i decided extract all the functionality from browser component
      and keep it in the hooks.
#41 - And we call this hook in Browser Component to make looks cleaner.

      ðŸ”°Part-15 (Building Browse Page) >2.34 hrs left

#42 - Created MainContainer.js file inside MainContainer Fetch the First Movie from the redux Store.
#43 - And also created another two Component which is Video Background.js and VideoTitle.js and 
      pass it to the MainContainer

      ðŸ”°Part-16 (Building Video Title(2.20-hrs-left))

#44 -  Passing the props from MainContainer to VideoTitle component
#45 - created the VideoTitle page and pass the props value.

      ðŸ”°Part-16.1 (Video Background(2.07-hrs-left))

#46 - Passing movieId props from MainContainer to VideoBackground component.
#47 - Fetch teh Video Api from TMDB app, and filtering the Videos Data-type --- "Trailer".
#48 - and call the function in useEffect hook. 
#49 - After that we have to pass the video key at the url, so for that i have passed an Action in movieSlice
      reducer function at movieSlice.js.
#50 - After that in VideoBackground component we have dispatched the action and pass the reducer function 
      like - addTrailerVideo and inside that pass the trailer object.
       Ex : dispatch(addTrailerVideo(trailer))
#51 - and then using useSelector fetch the trailer object from the Store and 
      pass the trailer.key to the video url.

      ðŸ”°Part-16.2 ( create Custom hook)

#52- Video Background becomes very clumsy after writing such this operation, 
      so it's better to create a custom hook and place all the functionality and call this hook to the Video background.

      ðŸ”°Part-17 (Video Background setup)

#53 - Fetch the embedded Youtube video data and set in Video Background
#54 - Styled the video in Background and setup to Autoplay and mute.

      ðŸ”°Part-18 (Creating Movie Suggestions List > 59 minutes left)

#55 - Created 2 Components 1st: MoviesList and 2nd: MoviesCard
#56 - In SecondaryComponent pass the MoviesList.
#57 - In SecondaryComponent fetch the Movies Data from the Store using useSelector and 
      pass the Required props to the MoviesList.
#58 - Fetch the IMG_CDN_API from the TMDB app and store in the constants.js.

#59 - In MoviesList Component with the Help of props > (which is movies Data) i have applied map method to the 
      movies data with teh MoviesCard Component.
#60 - And at the right of the Component i use a React Arrow icons which is used to scroll the elements to the x axis. 

#61 - and also fetch the poster path from the movie object and pass it to the MoviesCard
#61 - In MoviesCard set image sorce file, and it is fetch from the constants.js and which is IMG_CDN_API + poster_path
      which is the props and get it from the MoviesList.

      ðŸ”°Part-19 (Showing Popular movie List on Browse Page > 17 minutes left)

#62 - Fetch the Data Popular Movies Data from TMDB.
#63 - create a new usePopularMovies castom hook and there fetch the API, 
#64 - and Create new reducer function in movieSlice > addPopularMovies and store the data of Popular Movies.

      ðŸ”°Part-19.1 (Home Work to fetch another movie API'S )

#65 - Create custom hooks for TopRated Movies and Upcoming Movies, display the data to the screen. 










